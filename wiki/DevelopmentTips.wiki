#summary Some tips for developing EMMA

= Introduction =

This page has tips designed to assist someone developing more features for EMMA.

It is a work in progress and was copied from the old Sourceforge data so may be formatted a bit oddly.


= Details =

<P>This document will hopefully give some pointers and tips on developing for EMMA.</P> <P> </P> <P><B>*** WORK IN PROGRESS!! ***</B></P> <P> </P> <P> </P> <P><B>Settings:</B></P> <P> </P> <P> EMMA has several layers of settings. The first is the 'Settings.settings' file in 'Properties'. This holds system level and windows user level settings such as the database connection strings, any setting that might be required when a user is not logged in to EMMA must be stored here.</P> <P> </P> <P> <FONT SIZE=3>Note, any new settings added to this level mean that the 'MigrateSettings' method in 'DatabaseClasses.Updater' must be updated. Also, the new config file will need to be supplied when publishing the patch.</FONT></P> <P> </P> <P> <FONT SIZE=3>The second layer of settings is at the EMMA user level. The class is 'DatabaseClasses.UserSettings'. This class represents and abstracted xml file with the file itself stored in the database against the user account. To add a new setting, simply complete the following steps:</FONT></P> <P> </P> <OL> <LI><P> <FONT SIZE=3>Add your new setting to the 'Setting' enumeration at the end of the file.</FONT></P> <LI><P> <FONT SIZE=3>Add your settings to the 'GetDefaultValue' method. This will be used the first time EMMA attempts to retrieve a value for the new setting.</FONT></P> <LI><P> <FONT SIZE=3>Add your new setting to the list of 'GetValue' calls in 'BuildDefaultSettings'.</FONT></P> <LI><P> <FONT SIZE=3>Add a public property or method to access the new setting as appropriate. Use existing code as a template if needed.</FONT></P> <P></P> <P> </P> <P> 
<FONT SIZE=3>The third and final layer of settings is at the report group level. This works in exactly the same way as the settings at EMMA user level. The class file is 'DataBaseClasses.ReportGroupSettings'.</FONT></P> <P> </P> <P><FONT SIZE=4>Updating the Database:</FONT></P> <P> </P> <P> <FONT SIZE=3>Often we need to modify one of EMMA's databases. One database holds all the data from the static data dump, this is the eve database. The other holds all the user data, this is the emma database.</FONT></P> <P> </P> <P> <FONT SIZE=3>When releasing new features, etc, we often need to change stored procedures, modify tables, etc without affecting the data itself. This is done through the 'Update' method of the 'DatabaseClasses.Updater' class.</FONT></P> <P> </P> <P> <FONT SIZE=3>This method executes the '_Version' stored procedure to get the version number of the database file. It will then perform any changes required and update the version number when a change is complete. Note, the majority of the changes are to the emma database, at the end of the method is also a shorter section that updates the eve database if needed.</FONT></P> <P> </P> <P> <FONT SIZE=3>The other type of update we might want to do is when CCP updates the data dump. This is handled by the auto-updater. We update a totally clean version of the database file and then manually set the version number. The file can then be uploaded and released through the auto-update system as normal.</FONT></P> <P> </P> <P> <FONT SIZE=3>The procedure for updating the eve database file using SQL server management studio is as follows:</FONT></P> <P CLASS="western" STYLE="margin-bottom: 0cm"> </P> <OL> <LI><P> <FONT SIZE=3>Download and extract the data dump .bak file.</FONT></P> <LI><P> <FONT SIZE=3>Copy clean version of EveData.mdf (and log file) somewhere like C:\Temp (I'll call this EVEDATA)</FONT></P> <LI><P> <FONT SIZE=3>Make another copy of EveData.mdf (and log file) somewhere like C:\Temp\Old (I'll call this OLDEVEDATA)</FONT></P> <LI><P> <FONT SIZE=3>Open SQL server management studio and attach both databases, change the 'attach as' property to EVEDATA and OLDEVEDATA for clarity</FONT></P> <LI><P> <FONT SIZE=3>Right click EVEDATA-&gt;Tasks-&gt;Restore-&gt;Database</FONT></P> <LI><P> <FONT SIZE=3>Select 'From a device' and browse to the data dump .bak file. Check the 'Restore' option, Click 'ok' and wait for it to finish.</FONT></P> <LI><P> <FONT SIZE=3>Open 'Tables' for both EVEDATA and OLDEVEDATA. Remove all tables from EVEDATA that are not in OLDEVEDATA.</FONT></P> <LI><P> <FONT SIZE=3>Select OLDEVEDATA-&gt;programmability-&gt;Stored Procedures. Select all except the system folder, then right click, Script-&gt;Create to-&gt;clipboard</FONT></P> <LI><P> <FONT SIZE=3>Right click EVEDATA -&gt; new query</FONT></P> <LI><P> <FONT SIZE=3>ctrl+p to paste</FONT></P> <LI><P> <FONT SIZE=3>scroll to the top and change 'using OLDEVEDATA' to 'using EVEDATA'</FONT></P> <LI><P> <FONT SIZE=3>Click execute.</FONT></P> <LI><P> <FONT SIZE=3>Do the same for 'assemblies' and 'functions-&gt;table valued functions'</FONT></P> <LI><P> <FONT SIZE=3>Execute the stored procedure called 'INIT'. This sets up the jump distance tables based upon the new data and should take no more than a few seconds to complete.</FONT></P> <LI><P> <FONT SIZE=3>Right click EVEDATA-&gt;tasks-&gt;shrink-&gt;database, check 'reorganise files' and click ok.</FONT></P> <LI><P> <FONT SIZE=3>Right click EVEDATA-&gt;tasks-&gt;detatch. check 'drop connection' and click ok.</FONT></P> <LI><P> <FONT SIZE=3>Copy the EVEDATA mdf and log files back to the EMMA folder.</FONT></P>  <P> </P> <P> </P>